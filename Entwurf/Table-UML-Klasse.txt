Table
	Repräsentiert eine 2-dimensionale Tabelle bestehend aus Zeilen und Spalten mit dem Fokus auf zeilenweise Verarbeitung. Der Inhalt der Tabellenelemente ist nicht beschränkt.

	
- LinkedList<ArrayList<Object>> table
	Speichert die Daten der Tabelle, jedes LinkedList-Element enthält eine ArrayListe, welche die Elemente der Tabelle hält
- String id;
	Die Identifikationsnummer der Tabelle, kann der Name sein

	
	
+ Table(Table t, String id): void
	Erstellt eine Table-Instanz aus einer 2-dimensionalen Liste
	Dabei werden alle inneren Listen auf die selbe Länge verlängert und mit NULL aufgefüllt, damit die Tabelle immer gleich viele Spalten besitzt
		Table t: Die Table-Instanz aus der ein neuer Table erstellt wird, kann NULL sein
		String id: Die ID der neuen Instanz, kann NULL sein für keine ID
	
+ Table(String id): void
	Erstellt einen neuen Table mit leerer Tabelle
		String id: Die ID der neuen Instanz, kann NULL sein für keine ID

			
			
+ getElement(int row, int column): Object //Gibt ein einzelnes Element der Tablle zurück
	Gibt ein einzelnes Element der Tabelle an der angegebenen Stekle zurück
		int row: Die Zeile an der das Element liegt, darf nicht NULL sein
		int column: Die Spalte an der das Element liegt, darf nicht NULL sein
			Object: Das Element an der Stelle
			
+ getRow(int row): List<Object>
	Gibt eine ganze Zeile zurück
		int row: Die Position der Zeile, darf nicht NULL sein
			List<Object>: die Zeile als Liste
		
+ getColumn(int column): List<Object>
	Gibt eine ganze Spalte zurück
		int row: Die Position der Spalte, darf nicht NULL sein
			List<Object>: die Spalte als Liste
			
+ getFirstRow(): List<Object>
	Gibt die erste Zeile zurück
			List<Object>: Die erste Zeile

+ getLastRow(): List<Object>
	Gibt die letzte Zeile zurück
			List<Object>: Die letzte Zeile
		
+ setElement(Object o, int row, int column): void
	Ersetzt ein Element der Tabelle mit einem neuen Element
		Object o: Das neue Element, darf NULL sein
		int row: Die Zeile des Elements
		int column: Die Spalte des Elements
		
+ setRow(List<Object>, int row): void
	Ersetzt eine Zeile mit einer neuen Zeile
		List<Object>: Die neue Zeile als Liste, darf NULL sein
		int row: Die Position der zu ersetzen Zeile
		
+ setColumn(List<Object>, int column): void
	Ersetzt eine Spalte mit einer neuen Spalte
		List<Object>: Die neue Spalte als Liste, darf NULL sein
		int row: Die Position der zu ersetzen Spalte
		
+ removeElement(int row, int column): void
	Ersetzt ein Element mit NULL
		int row: Die Zeile des Elements
		int column: Die Spalte des Elements
	
+ removeRow(int row): void
	Ersetzt eine Zeile mit NULL
		int row: Die Position der Zeile
		
+ removeColumn(int column): void
	Ersetzt eine Spalte mit NULL
		int column: Die Position der Spalte

+ appendRow(List<Object> row): void
	Fügt eine neue Zeile hinter der letzten bestehenden Zeile ein
		List<Object> row: Die einzufügende Zeile als Liste
		
+ appendColumn(List<Object> column): void
	Fügt eine neue Spalte hinter der letzten bestehenden Spalte ein
		List<Object> column: Die einzufügende Spalte als Liste
		
+ getRowCount(): int
	Gibt die Anzahl Zeilen zurück
			int: Die Anzahl Zeilen
+ getColumnCount(): int
	Gibt die Anzahl Spalten zurück
			int: Die Anzahl Spalten
			
+ getID(): String
	Gibt die ID der Tabelle zurück
			String: Die ID, NULL falls keine ID gesetzt wurde
			
+ clone(): Table
	Erstellt eine ganze Kopie der Tabelle
			Table: die Kopie der Tabelle als neue Table-Instanz
			
+ clear(): void
	Löscht die Tabelle komplett und ersetzt sie gegen NULL
	
+ isEmpty(): boolean
	Gibt zurück ob die Tabelle leer ist
			boolean: true wenn die Tabelle leer oder NULL ist
			
+ compare(Table o): boolean
	Vergleicht die Table-Instanz mit einer anderen Instanz
		Table o: Die andere zu vergleichede Table-Instanz
			boolean: true, wenn alle Einträge gleich sind, sonst false